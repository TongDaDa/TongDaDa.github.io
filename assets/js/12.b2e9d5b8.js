(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{386:function(t,s,e){t.exports=e.p+"assets/img/fixonWebstorm.56aeafc3.gif"},387:function(t,s,e){t.exports=e.p+"assets/img/lint-staged.423bd37e.gif"},388:function(t,s,e){t.exports=e.p+"assets/img/lint-for-sourcetree.5a45f49e.gif"},389:function(t,s,e){t.exports=e.p+"assets/img/lint-staged.ff978f1a.gif"},542:function(t,s,e){"use strict";e.r(s);var a=e(4),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"为什么需要统一格式和规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要统一格式和规则"}},[t._v("#")]),t._v(" 为什么需要统一格式和规则")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[t._v("#")]),t._v(" 格式")]),t._v(" "),a("p",[t._v("由于团队协作中各个开发者的编辑器，显示器不一样等等问题，导致在书写JS这种对空格和分号等字符不敏感的语言时格式上\n偏离比较大，从而不适用各个成员的阅读习惯，这是一个浪费时间的问题。同时也不能避免一些糟糕的让人眼花缭乱的代码，\n虽然一部分是使用形式上导致的，但有一部分取决于代码本身的书写格式。")]),t._v(" "),a("p",[t._v("所以，对于代码格式，解决的最重要的事情就是团队中的每一个人都有同一种阅读习惯，为阅读他人代码节省时间，提高效率，\n甚至，从"),a("code",[t._v("精神")]),t._v("上可以让开发者们爱上他们的代码，"),a("strong",[t._v("因为好看的东西总会被珍惜，丑陋的东西只会任人抛弃，越踩越烂。")])]),t._v(" "),a("h3",{attrs:{id:"规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),a("p",[t._v("规则是对代码质量的浅层校验，通过它可以限制一些基本的使用方式，去避免发生一些低级错误。其次也可以统一项目代码规范。")]),t._v(" "),a("h2",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"prettier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prettier"}},[t._v("#")]),t._v(" prettier")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://prettier.io/docs/en/cli.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Prettier")]),a("OutboundLink")],1),t._v(" 是美化前端代码的工具，目前支持多种格式，"),a("code",[t._v("vue")]),t._v("， "),a("code",[t._v("html")]),t._v(", "),a("code",[t._v("jsx")]),t._v(", "),a("code",[t._v("ts")]),t._v(", "),a("code",[t._v("js")]),t._v(", "),a("code",[t._v("css")]),t._v(", "),a("code",[t._v("less")]),t._v(", 等等，\n它可以解决上面说的代码格式问题，使用一套"),a("code",[t._v("格式规则")]),t._v("去格式化你的代码，下面是格式前后的对比。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(386),alt:"clipboard.png"}})]),t._v(" "),a("p",[t._v("上图是我把它的格式"),a("code",[t._v("破坏")]),t._v("之后，使用集成在编辑器中修复它，当然也可以通过命令式去检测或整理它。所以，给我的感受是"),a("strong",[t._v("代码好像整容了")]),t._v("😺,\n如果初次使用prettier工具的可能会对代码对安全性产生疑问，这样做会不会对代码的逻辑作出修改，\n我使用prettier半年多了，目前还没有碰到过这种情况，像"),a("code",[t._v("eslint --fix")]),t._v("一样，它只会做一些格式上的补充，\n不会舍弃或添加多余的代码，这也是npm的周下载量在八百万次的原因。")]),t._v(" "),a("h3",{attrs:{id:"eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[t._v("#")]),t._v(" eslint")]),t._v(" "),a("p",[a("code",[t._v("eslint")]),t._v(" 就是一个很好用的规则检测工具，有非常强大的规则和插件库。但是很多项目因为时间等问题会使用"),a("code",[t._v("ignore")]),t._v("忽略代码，\n甚至是慢慢的就抛弃掉"),a("code",[t._v("eslint")]),t._v("了，因为每次写完之后都是几十个错误，需要挨个去修改，太耽误时间。")]),t._v(" "),a("p",[t._v("出现这种情况多数是规则不符合个别人的习惯，比如有个规则是React的props名字需要按照字母表的顺序自上而下😭，\n这符合部分人，但一般人没这个概念，这就需要在lint规则之前达成一个共识，但不能不使用。")]),t._v(" "),a("p",[t._v("一般lint检测会在部署阶段做，如果失败就不进行build。这么做有一些麻烦，因为有时会忘记在提交之前进行lint，\n这种就得再提交一次，作为前者的lint修复。所以我们把它放到本地，简单了很多。")]),t._v(" "),a("h3",{attrs:{id:"husky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#husky"}},[t._v("#")]),t._v(" husky")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("husky")]),a("OutboundLink")],1),t._v("是一个npm包，它通过"),a("code",[t._v("script")]),t._v("中的"),a("code",[t._v("install")]),t._v("钩子脚本\n，在你安装这个包的时候，会向你的 "),a("code",[t._v(".git")]),t._v(" 隐藏目录添加钩子脚本。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v(".git")]),t._v(" 中我们可以添加很多钩子，比如，"),a("code",[t._v("pre-commit")]),t._v(", "),a("code",[t._v("pre-push")]),t._v(" 等等，\n它也正是运用这种方法，在我们提交代码时给我们一个时机去运行我们自己的脚本。")]),t._v(" "),a("p",[t._v("那么现在我们就可以在"),a("code",[t._v("husky")]),t._v("提供的钩子上添加我们的 "),a("code",[t._v("eslint --check --ext js,jsx")]),t._v(" 的命令，\n每次提交之前都跑一次"),a("code",[t._v("lint")]),t._v("看是否有没有不合规的代码😄。那么，问题来了，如果是一个大型项目，\n跑一次几乎要花费十几分钟的时间，这个太低效，也太可怕了，怎么办呢？")]),t._v(" "),a("h3",{attrs:{id:"lint-staged"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lint-staged"}},[t._v("#")]),t._v(" lint-staged")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("lint-staged")]),a("OutboundLink")],1),t._v("和husky没有任何关系，它们属于合作者，\nlint-staged只是作为一个"),a("code",[t._v("eslint")]),t._v("的"),a("strong",[t._v("调用者")]),t._v("，做的是只lint我们提交的文件，不用过多的去检测整个项目的文件。\n然而，我们可以把它添加到"),a("code",[t._v("husky")]),t._v("的钩子中，从而达到每次提交只检测提交的文件的效果。")]),t._v(" "),a("p",[t._v("另外对于之前舍弃eslint的项目，可能无法一时就全部都把lint修复好，"),a("code",[t._v("lint-staged")]),t._v("也是一个不错的选择，因为随着每改动一个文件，\n都会去把之前遗留在这个文件上的lint规则修复后才能提交，平分很大的修复工作量。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(387),alt:"clipboard.png"}})]),t._v(" "),a("p",[t._v("如图，我添加了一个 "),a("code",[t._v("//")]),t._v(" 后面必须有空格的lint, 并且把"),a("code",[t._v("prettier")]),t._v("集成到"),a("code",[t._v("eslint")]),t._v("中，当我在提交它的时候，\n告知我是未通过检测的，3个错误，2个提醒("),a("code",[t._v("prettier")]),t._v("检测出来的问题作为提醒)，三个错误是三行的注释，\n所以，不能提交代码。")]),t._v(" "),a("p",[t._v("对于使用"),a("code",[t._v("Sourcetree")]),t._v("等GUI的git管理工具来说，其结果也是一样的。")]),t._v(" "),a("p",{staticClass:"text-center"},[a("img",{attrs:{src:e(388)}})]),t._v(" "),a("h3",{attrs:{id:"结合体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结合体"}},[t._v("#")]),t._v(" 结合体")]),t._v(" "),a("p",[t._v("以下是"),a("code",[t._v("pacakge.json")]),t._v("的配置片段，我们在"),a("code",[t._v("husky")]),t._v("中运行"),a("code",[t._v("lint-staged")]),t._v("命令，\n它去调用"),a("code",[t._v("prettier")]),t._v("脚本自动修复繁枝错节的代码格式，然后再去"),a("code",[t._v("lint")]),t._v("我们提交的文件(注意不是提交的代码片段)。😺")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pre-commit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint-staged"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"**/*.{js,jsx}"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier --write"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("匹配所有暂存文件中的"),a("code",[t._v("js, jsx")]),t._v("文件，对他们运行"),a("code",[t._v("prettier")]),t._v("和"),a("code",[t._v("eslint")]),t._v("，对于prettier，是自动修复，\n而eslint，只做提醒，修复考虑到可能有其他副作用，需要手动执行。以下是最终效果图。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(389),alt:"clipboard.png"}})]),t._v(" "),a("p",[t._v("上图提交代码时，自动修复代码格式，并提示有lint错误，不能提交，之后手动同步了一下文件(更新美化了之后的), 然后手动把lint错误去除后，提交成功。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("给代码做了美化和规则化只是让代码更稳定，易维护的第一步，他们做不了像ts那样对语言做强类型校验，让我们更多的思考接口设计中，\n但可以提供最基本的策略和格式去避免小错误的发生，人越多的项目，它的好处就越明显。")]),t._v(" "),a("p",[t._v("😔实践过程中踩了一些坑， lint-staged逗比的作者(我估计因为肺炎正在家没事干呢)为了解决一个windows权限问题把版本弄到了10.*，之后mac又出权限问题了，\n还是把版本回退到了9.*，这样保险。")])])}),[],!1,null,null,null);s.default=r.exports}}]);